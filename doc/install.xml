<?xml version="1.0" encoding="utf-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>OxGarage: installation</title>
        <author>Lukáš Platinský</author>
      </titleStmt>
      <editionStmt>
        <edition>
          <date>23rd August 2010</date>
        </edition>
      </editionStmt>
      <publicationStmt>
        <authority>infodev@it.ox.ac.uk</authority>
        <date when="2010-08-23"/>
      </publicationStmt>
      <sourceDesc>
        <p>Written by OpenOffice conveter</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change>
	  <date>$LastChangedDate: 2013-12-05 16:03:34 +0000 (Thu, 05 Dec 2013) $</date>
	  <name>$LastChangedBy: jamesc$</name>
      </change>
    </revisionDesc>

  </teiHeader>
  <text>
    <body>
        <div>
          <head>Installation procedure</head>
          <p>To install the OxGarage service from source, you need maven. To fully utilise the potential of OxGarage, you also need OpenOffice.org installed (at least version 3.0.0). Install these before you proceed. Then use <emph>Makefile</emph> to install OxGarage:</p>
          <list type="unordered">
	    <item>Go to the oxgarage source directory.</item>
	    <item>Run <emph>$ make setup</emph> – this sets all the necessary maven dependencies.</item>
	    <item>Run <emph>$ make build</emph> – runs mvn install. </item>
	    <item>Run <emph>$ make install</emph> – takes the created .war files and copies them into tomcat directory.</item>
	    <item>Run <emph>$ make test</emph> – runs some test conversions and compares them with expected results.</item>
	  </list>
          <p>You might need to change the location of your Tomcat directory in the Makefile.</p>
        </div>
        <div>
          <head>Configuration</head>
          <div>
            <head>Configuration Files</head>
            <p>There are several things that should be configured using configuration files. These include:</p>
            <list type="unordered">
              <item>domain name in
	      <emph>ege-webclient/WEB-INF/web.xml</emph>. You need to
	      edit the file to add your domain name and port,
	      e.g. instead of:
	      <p><emph>&lt;param-value&gt;</emph>http://localhost:8080/ege-webservice/<emph>&lt;/param-value&gt;</emph></p>
            you should put there something like:
            <p>&lt;param-value&gt;http://www.your-domain.com:your-port/ege-webservice/&lt;/param-value&gt;</p>
	    </item>
            </list>
            <p>If you leave the <emph>localhost</emph> settings in
	    place, it might work for some browsers, but other browsers
	    will not render the site, as they will consider the
	    website is trying to do cross-site scripting (as <emph>localhost</emph> is a different domain name from <emph>www.your-domain.com).</emph></p>
            <list type="unordered">
              <item>OpenOffice.org home directory in <emph>ege-webservice/WEB-INF/lib/tei-config/configuration/OpenOfficeConfiguration</emph>. This file contains only one line, which should be a path to OpenOffice.org home directory, e.g.:<p>/usr/lib/openoffice/</p></item>
            </list>
          </div>
          <div>
            <head>Other Configuration and Required Files</head>
            <p>There is also some configuration which is coded in Java source files. If you have access to them, you can change these too, otherwise it is required that the files are located exactly where the servlet is trying to find them. Sometimes these locations are being referred to from several different places, so you might want to double check that you changed all of them.</p>
            <list type="unordered">
              <item><emph>webservice/WEB-INF/lib/</emph> – this directory should also contain all the necessary jar files (see the list below).</item>
              <item><emph>webservice/WEB-INF/config/</emph> – this folder contains <emph>fileExt.xml</emph> file, which provides appropriate file extensions for all mime-types used in OxGarage. </item>
              <item><emph>webservice/WEB-INF/locale/</emph> – here are located files hodling conversion properties descriptions displayed to the user. There is one file per language (currently English and Polish, but there are some things missing in the Polish version). However, as far as I know, the feature of choosing a language is not implemented yet. Nonetheless, at least one of these files is still required.</item>
            </list>
          </div>
          </div>

        <div>
          <head>List of .jar files which are built from the source of OxGarage</head>
          <list type="unordered">
            <item>ege-api-0.2.1.jar</item>
            <item>ege-framework-0.3.jar</item>
            <item>ege-validator-0.3.jar</item>
            <item>ege-xsl-converter-0.4.jar</item>
            <item>oo-converter-1.0.jar</item>
            <item>tei-converter-0.5.jar</item>
          </list>
        </div>
        <div>
          <head>List of .jar files of the libraries used</head>
          <list type="unordered">
            <item>avalon-framework-4.1.3.jar </item>
            <item>collections-generic-4.01.jar </item>
            <item>colt-1.2.0.jar </item>
            <item>commons-cli-1.1.jar </item>
            <item>commons-compress-20050911.jar </item>
            <item>commons-fileupload-1.2.1.jar </item>
            <item>commons-io-commons-io-1.4.jar </item>
            <item>commons-logging-1.1.jar </item>
            <item>concurrent-1.3.4.jar </item>
            <item>jdom-1.1.jar </item>
            <item>jodconverter-3.0-beta-3.jar </item>
            <item>jpf-1.5.1.jar </item>
            <item>jpf-tools-1.5.1.jar </item>
            <item>json-20080701.jar </item>
            <item>juh-3.1.0.jar </item>
            <item>jung-algorithms-2.0.1.jar </item>
            <item>jung-api-2.0.1.jar </item>
            <item>jung-graph-impl-2.0.1.jar </item>
            <item>jung-io-2.0.1.jar </item>
            <item>jung-samples-2.0.1.jar </item>
            <item>jung-visualization-2.0.1.jar </item>
            <item>jurt-3.1.0.jar </item>
            <item>log4j-1.2.12.jar </item>
            <item>logkit-1.0.1.jar </item>
            <item>org.apache.commons.io-commons-io-1.4.jar </item>
            <item>ridl-3.1.0.jar </item>
            <item>saxon9-9.2.0.jar </item>
            <item>servlet-api-2.3.jar </item>
            <item>stax-api-1.0.1.jar </item>
            <item>unoil-3.1.0.jar </item>
            <item>Vesta-1.0.8.jar </item>
            <item>wstx-asl-3.2.6.jar </item>
          </list>
        </div>
        <div>
          <head>How does the OxGarage work:</head>
          <p>The program is divided into 8 parts: API, framework, 4 plug-ins (1 validator, 3 converters), web service and web client. API offers only the base, on which the framework is built. The role of the framework is to search for all provided plug-ins, initialize them and calculate all possible input types and conversion paths. To do this, it asks each converter to provide a list of all conversions it is able to do. Then the framework constructs a graph, where different document types are nodes and conversions are edges. This graph is directed and weighted. Weights to the edges are assigned based on a subjective judgement of how good or bad the resulting document looks. The better the document looks, the lower the weight. These weights are then summed together and only the path with minimal total weight is offered to the user in case there are several routes available from input format to output format. Framework also provides for processing the path of conversions that are needed to be done and performing the necessary conversions in a chain of threads, where one thread passes its result to the next thread until the desired output format is reached. Each thread does exactly one conversion and uses a converter to perform it.</p>
          <p>The role of validator is to validate documents before conversions. This is done in order to stop user from transforming a malformed document, as this could cause an error during conversion, or an unexpected result. Unfortunately, the validator is only capable of validating very few document formats (some XML documents) and hence it is not used very often.</p>
          <p>Then there are converters, which do the conversion from one format to another. Each converter must be able to provide a list of all possible conversions it can do and also perform a conversion. Currently there are 3 different converters: XslConverter, TEIConverter and OOConverter. XslConverter and TEIConverter are using xsl style-sheets to convert between different form of XML documents. The main difference between them is that TEIConverter is used for a more complex conversions, e.g. conversions to and from docx and odt. The OOConverter is using a JODConverter library to start OpenOffice.org in a headless mode and then calls it to convert a document. More plug-ins (both converters and validators) can be added quite easily. If you are interested in this, I suggest reading <ptr target="http://enrich-ege.sourceforge.net/creation.html"/>.</p>
          <p>Web service is a servlet, that uses the framework to perform conversions. It is REST-full and you can control it simply using POST and GET request. First you need to send GET request asking for all the possible input formats. Then you need to send another GET request to get all possible output formats from a given input format. After this, you need to POST your file into a given URL and that's it. This can be particularly useful for batch processing a large number of files. For more information read <ptr target="http://enrich-ege.sourceforge.net/restws.html"/>. Of course, if you already know the URL for the conversion, it is enough to POST your file to this URL without having to go through all these steps.</p>
          <p>The last important part of OxGarage is the web client. This is basically a user interface for the web service. The important thing about it is that it requires JavaScript to work. This web client simply sends GET and POST requests to web service and processes the responses.</p>
        </div>
        <div>
          <head>How to add new conversions</head>
          <p>Adding new conversions can be done in two different ways. You can either build a new converter, or add new conversions into existing converters. Adding new conversions is rather different in each converter and you can find very brief instructions in the next sections. After you have added the format, you will also need to add new mime-type and extension pair into <emph>fileExt.xml</emph> file in the web service directory. It is strongly advised to use the same format description, format name and format mime-type for one document format, in case it is defined in several converters.</p>
          <div>
            <head>Adding new conversions to XslConverter</head>
            <p>This can be done very easily. All you have to do is to add the new style-sheets into you stylesheets directory. Then you need to provide a <emph>plugin.xml</emph> file specifying some properties of the conversion. For and example of such file, see <emph>profiles/default/csv</emph> folder in your stylesheets directory. After it is done, you only need to refresh the web client page and new conversion should appear. Note that you can also add new conversions by defining them in the <emph>ege-xsl-converter/src/main/resources/META-INF/plugin.xml</emph> file. But then you have to recompile the whole application.</p>
          </div>
          <div>
            <head>Adding new conversions to TEIConverter</head>
            <p>This is a bit more difficult. First you need to add the conversion information into <emph>Format.java</emph> file. After this is done, you need to define the conversion in the <emph>TEIconverter.java</emph> file. You might also need to look into <emph>ConverterConfiguration.java</emph> in order to change some conversion settings. When everything is finished, you need to rebuild and redeploy the whole application.</p>
          </div>
          <div>
            <head>Adding new conversions to OOConverter</head>
            <p>In order to do this, you need to add the document format into one of the files: <emph>InputTextFormat.java, InputSpreadsheetFormat.java, InputPresentationFormat.java, OutputTextFormat.java, OutputSpreadsheetFormat.java, OutputPresentationFormat.java</emph>. Then you need to change some of the Java files depending on the support of the new format by the JODConverter library.</p>
          </div>
        </div>
        <div>
          <head>How to redefine weights of edges for conversions</head>
          <p>As was mentioned before, each conversion is assigned a
	  weight according to how much we trust the result. The better the result, the lower the weight. This has to be done, because there is a huge amount of possible ways how to get from input format to output format. Therefore, now the program chooses always the path with the smallest total weight, which is calculated as sum of weights of all conversions which form the path. If there is more than one path with the smallest total weight, one of the paths is chosen non-deterministically. </p>
          <p>However, during time the conversions will surely become more refined and produce better results. Therefore, you might want to change the weights to make the service use the current best conversions more often. Again, what you need to do in order to change the weights depends quite a lot on the converter.</p>
          <div>
            <head>Changing weights in XslConverter</head>
            <p>To change the weights in XslConverter you need to change the value of <emph>“cost”</emph> parameter in <emph>plugin.xml</emph> file. This file can be found in <emph>ege-xsl-converter/src/main/resources/META-INF</emph> directory. If the conversion you are looking for is not there, it is possible that it was added by definition in stylesheets directory. In that case, you need to find the appropriate <emph>plugin.xml</emph> file in your stylesheets directory.</p>
          </div>
          <div>
            <head>Changing weights in TEIConverter</head>
            <p>In this case you need to find <emph>Format.java</emph> file. There you can easily adjust the weights.</p>
          </div>
          <div>
            <head>Changing weights in OOConverter</head>
            <p>In OOConverter weights are calculated as the sum of the
	    input's and output's weight. Therefore, if for example in
	    the new version of OpenOffice.org its ability to read docx
	    files improves rapidly and you would like to reflect this
	    in the weightings, you need to find the appropriate input type in the appropriate file. In this case it would be DOCX in <emph>InputTextFormat.java</emph>. Now you simply change the value of the cost variable and it's done.</p>
          </div>
        </div>
        <div>
          <head>Known Current Issues</head>
          <p>There are some things which are not always 100% correct. These include:</p>
          <list type="unordered">
            <item>When converting from some spreadsheet documents, only the first sheet is converted if there is more than one sheet in the document. This is because OpenOffice.org can only convert the active sheet. However, when running in headless mode, it always takes the first sheet as the active one.</item>
            <item>When converting TEI → HTML → PDF, pictures get a little bit stretched horizontally. This is probably because of the OpenOffice.org running in the headless mode.</item>
          </list>
        </div>

    </body>
  </text>
</TEI>
